// 4-2 集合型別（collection type）

//當手上有一筆資料，可以用一個字串變數來儲存。但當有多筆類似性質的資料時，我們會把它放進一個集合中。
//Go 語言的集合有三種：陣列、切片、map 。
//這些同樣屬於強型別，且很容易就能用迴圈走訪其內容。
//但這集合型別有不同性質，因此有其各自適用的場合。

// 4-3 陣列（array）
// 4-3-1 定義一個陣列
/*
陣列是 Go 語言最基本的集合形式。
定義陣列時，必須指定陣列所含資料的型別、陣列大小。

＊＊[<長度>]<型別>

例、[10]int ，含有 10 個整數元素的陣列。

陣列元素可以是任意型別，包括指數、甚至是其他陣列等等，但只能有一種型別。
陣列必須指定長度，如果沒有長度一樣會成立，但它會是切片，另一種彈性更大的集合形式。


＊＊在宣告時為陣列賦予初始值：
[<長度>]<型別>{<值1>,<值2>,...<值N>}

例、[5]int{1} ，將陣列第一個元素賦值為整數 1 ，其餘 4 個則為零。

＊＊依據所提供的初始值來設定陣列長度：
[...]<型別>{1,2,3,4,5}  會建立一個長度為 5 的陣列。

不管用什麼方式定義陣列，Go 語言陣列的長度都會在編譯時就決定好，到了執行階段就不可改變。
*/
package main

import "fmt"

func defineArray() [10]int {
	var arr [10]int
	return arr

}
func main() {
	fmt.Printf("%#v\n", defineArray())
}
