// 5-1 前言
/*
函式是許多程式語言的關鍵核心。
其實就是我們宣告來從事一項任務的一段程式碼。
Go 語言是可以完全沒有輸入和輸出、也可以有多重輸入和輸出。
Go 的函式和其他程式語言的不同處之一，就在於有能力回傳多重值。大多數程式語言都只能回傳一個值。

下面各節會看到 Go 語言一些與眾不同，適用於以下不同場合：
1.將函式當成引數傳遞給其他函式。
2.將函式賦值給變數、以及當成另一個函式的傳回值。
3.將函式視為型別。
4.匿名（anonymous）、閉包（closures）函式。

Go 語言是所謂的一級函式（first-class functions），就是函式可以當成其他函式的引數（傳給參數的值）或傳回值。
可以接收其他函視為引數的函式，又稱為高階函式（higher-order functions）。

// 5-2 函式
/*
使用函式的好理由：
1.分解複雜的任務：
程式就是要拿來執行任務的，若任務本身很複雜，應將其分解成多個較小的任務。函式可以應付各個小任務，藉以解決更大的問題。此外小任務較容易撰寫，且讓不同的函式來完成不同任務，能讓整體程式更易於維護。

2.精簡程式碼：
當發現程式中有一再重複出現的類似程式碼時，就表示應該把那些程式碼放進函式。重複的程式碼不易維護。

3.重複使用性：
一旦定義了函式，就可以一再呼叫它，甚至可被其他程式開發人員使用。這種函式可共享的特性，能讓你減少程式碼行數和省下時間，不必再重頭來過。


設計函式應當遵循的守則：
1.單一責任制：一個函式應該只負責一項任務。這樣測試比較簡單也易維護。

2.短小精悍：盡量讓函是的程式碼保持在 25 行以內。但也不是什麼鐵則。但簡潔的好處，是你可以避免替大型函式除錯時面臨的複雜性，撰寫單元測試時也能得到更好的程式碼覆蓋率（code coverage，被測試的原始碼比例）
