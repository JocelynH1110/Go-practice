// 2-4-4  break 和 continue 敘述
//看看如何主動控制迴圈走向，跳過迴圈某一次的重複，或是停止整個迴圈。

/*
有兩個選擇：
1. 關鍵字 continue ：
	會中止當下這一輪迴圈，並進入新一輪的迴圈。迴圈的結束敘述（如變數遞增）仍會執行，新的一輪迴圈也會再次檢查條件敘述是否成立。

2. 關鍵字 break：
	會中止當下這一輪迴圈，但不會再進入新一輪的迴圈，是完全離開迴圈。

若只是要略過集合中的某個單一項目不處理，例如有一兩筆資料室無效的，而其他資料仍然有效時，可用 continue 跳過無效資料的處理。
但若集合中資料有誤，導致其他資料也失去意義，就可以用 break 結束整個 for 迴圈。
*/

// 練習、用 break 用和 continue 來控制迴圈：隨機產生 0~8 數字，略過 3 的倍數、偶數就跳過離開迴圈。
package main

import (
	"fmt"
	"math/rand"
)

func main() {
	for {
		r := rand.Intn(8) //產生0~8 產生整數亂數
		if r%3 == 0 {
			fmt.Println("略過")
			continue
		} else if r%2 == 0 {
			fmt.Println("跳出")
			break
		}
		fmt.Println(r)
	}
}

//以上是用 for 的無窮迴圈寫的，如果沒有用 break 打斷它，會導致卡住其他程式，最後只能用強制關閉程式或重新開機來解決。故要小心使用。
