//	2-4 迴圈（loop）
// 2-4-1  for 迴圈基礎
/*
迴圈是重複程式動作最簡單的方法。
GO 語言只支援一種迴圈敘述：for ：迴圈。

＊＊for 迴圈分幾種寫法
第一種：常用來處理有序的集合，像是陣列、切片等等。
for <起始賦值敘述>; <條件敘述>; <結束敘述> {
	<程式區塊>
}
條件敘述：會在迴圈每一次執行前檢查，成立就繼續執行迴圈，反之結束。
結束敘述：在迴圈跑完一輪後執行，常用來做累加，會在下一次迴圈開始前用於條件敘述。


for 後面的敘述們都可以省略，故最簡單的迴圈可寫成：
for {
	<程式區塊>
}
這樣相當於 for true，會形成無窮迴圈，除非用一個 break 敘述來主動中斷它。


另一種變形，就是從一個來源讀取資料，然後回傳一個布林值，讓迴圈判斷是否還有資料要讀取。
for <條件敘述> {
	<程式區塊>
}
這類似某些語言的 while 迴圈，也相當於寫成 for ;<條件敘述>;


最後一種：用來走訪無序或長度不確定的資料集合，例如、映射表（map）。（lesson 4）
for <鍵>, <值> := range <集合> {
	<程式區塊>
}
這相當於一些語言的 for each 或 for in 或迴圈，每次從集合取出一組值，走訪完後迴圈就結束。
*/
