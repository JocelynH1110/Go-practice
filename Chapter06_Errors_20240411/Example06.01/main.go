// 6-1 前言
//處理錯誤是軟體開發過程的關鍵。
//Go 函式在傳回值時，最後一個值應該要是 error，而這個錯誤值也應該得到妥善處理。

// 6-2 程式錯誤的類型
/*
所謂的程式錯誤（error）就是會讓程式發生意料之外結果的原因。

會遇到的錯誤包含以下三種類型：
1.語法錯誤（syntax errors）
2.執行期間錯誤（runtime errors）
3.邏輯錯誤（logic error)或語意錯誤（semantic errors）

（本章節會著重於執行期間錯誤）

/// 6-2-1 語法錯誤
/*
語法錯誤來自於程式語言運用不當，通常是對程式語言不夠熟悉、打錯字、或寫錯語法。

常見的語法錯誤像是：
1.迴圈語法不正確
2.各種括號放錯地方
3.寫錯函式或套件名稱
4.將型別不符的引數傳給函式參數
*/

/// 6-2-2 執行期間錯誤
/*
錯誤來自程式被要求進行它做步道的動作。
與語法錯誤不同之處在於，這種錯誤只能等到實際執行程式時才會出現。

常見的執行期間錯誤：
1.連接一個不存在的資料庫
2.開啟不存在的檔案
3.以迴圈走訪切片或陣列，但迴圈索引卻超過集合中的索引範圍
4.變數的數值計算後超過範圍，發生了越界繞回
5.不當的數學運算，例如將數字除以 0
*/

// 練習、加總數字時的執行期間錯誤
/*
package main

import "fmt"

func main() {
	nums := []int{2, 4, 6, 8}
	total := 0
	for i := 0; i <= 10; i++ {
		total += nums[i]
	}
	fmt.Println("總和：", total)
}
*/

//for 迴圈走訪切片時，索引 i 遞增到 4 時超出了切片的最大索引 3 ，於是引發了 panic。解決方式之一是用 range 來根據切片長度走訪，如下：

/*
package main

import "fmt"

func main() {
	nums := []int{2, 4, 6, 8}
	total := 0
	for i := range nums {
		total += nums[i]
	}
	fmt.Println("總和：", total)

}
*/

/// 6-2-3 邏輯錯誤/語意錯誤
/*
也就是程式對資料做了不正確的判斷。

錯誤容易被排除順序（易 → 難）
語法錯誤>>執行期間錯誤>>邏輯錯誤（語意錯誤）

程式處理資料的邏輯有缺陷，同樣會造成問題。會發生這種錯誤的可能原因包括：
1.錯誤的計算方式
2.存取錯誤資源（檔案、資料庫、伺服器、變數等）
3.變數邏輯判斷不當
*/

// 練習、評估步行距離的邏輯錯誤。(距離2km 以上就搭車)
package main

import "fmt"

func main() {
	km := 2
	if km > 2 {
		fmt.Println("搭便車")
	} else {
		fmt.Println("用走的")
	}
}

//程式執行未發生錯誤，但顯示訊息卻不如預期。因為兩公里以上搭車，卻顯示用走的。因為少寫了一個等於。
