// 8-1 前言
// 8-1-1 何謂套件
/*
本章學習重點：
1.Go 語言如何將程式碼組織成套件。
2.如何透過套件隱藏或顯示 Go 語言中的各種套件，ex、結構、介面、函式等。

目前為止，所寫的成是在規模和複雜度上很有限，大部分都只包含在一個 main.go 檔案中，而該檔案屬於單一套件 main。

舉例來說， strings 這個套件就收集了各種操作字串用的函式，而且就只包含字串處理相關功能，因此開發人員需要應付字串時，就能從這套件找到需要的東西，不需再自己重新定義。

strings 套件由很多個檔案構成，這些檔案也都根據他們提供的內容來命名，但全都宣告為 string 套件（package string）。

套件的概念有助於將程式碼組織為模組化的單元。
首先把一群具備單一目的的程式碼擺在一個套件當中，接著把程式碼依其功能分割成各別的 .go 檔案，並依其功能命名之，確保每個檔案中的各個函式只會用於特定功能。
*/

// 8-1-2 運用套件的好處
/*
程式開發重點：
易於維護
可重複利用
模組化

套件在這三方面都可帶來好處：
1.易於維護：
模組能將程式碼分割成小單元，檔案的名稱也會反應模組各部份的功能，使程式維護和修改起來更加容易。
2.可重複利用：
  套件將程式碼包裝成可重複利用的形式，具備以下優點：
  (1)沿用既有套件，不必重新發明，減少未來專案的開發成本和交付時間。
  (2)既有套件已經經歷過更多的測試和使用，因而能提升程式品質、減少潛在臭蟲。
  (3)省下開發時間，能有更多心思投注在需要創新的地方。
  (4)隨著套件數量成長，能更迅速規劃好未來的專案。
3.模組化：
模組化和可重複利用是相近的概念，因模組化的程式碼通常會比較容易重複使用。
*/

=======================================================================
// 8-2 使用套件
// 8-2-1 何謂套件
/*
Go 語言追求所謂的「Don't Repeat Yourself,dry」法則，亦即同樣程式碼不該寫兩次。

Go 語言允許讓好幾個檔案共享一個套件，意即能將同一套件的程式碼拆成更易維護的小單元，而每個檔案都應該以該單元的功能來命名。
Go 語言不在意套件含有多少個檔案；只要同資料夾的所有檔案都宣告為某某套件，就都可以透過該套件來存取。

這些檔案會收集在電腦中的一個資料夾下，而該資料夾名稱就是前述檔案所宣告的套件名稱。也就是說，一個套件實際上是系統中的一個目錄，它會收集屬於該套件的所有檔案。
*/

// 8-2-2 套件的命名
/*
套件名稱代表著套件的內容和用途，像是套件自帶的說明文件。

良好的套件名稱應該符合：
1.全小寫，不要大小寫混雜，不該有底線。
2.簡潔。
3.使用非複數名詞。
4.避免太通用名稱。

＊駝峰式（每個單字首大寫）、蛇行式（每個單字間用底線連接）→ 都不適合。

Go 語言本身確實仍有很多套件會用複數型態的名詞或動詞來命名，但這點能免則免。

Go 語言鼓勵用縮寫，只要縮寫在程式設計社群中很好認或很常見，讓人一看便知即可。
ex、strconv （string conversion, 字串轉換）
	regexp （regular expression, 正規表示式）
	sync  （synchronization, 同步運算）
	os  （operating system, 作業系統）
*/
